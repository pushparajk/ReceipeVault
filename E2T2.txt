
Vulnerability 1: S3 Block Public Access setting should be enabled at the bucket-level
--------------------------------------------------------------------------------------
Remediation:

This control checks whether S3 buckets have bucket-level public access blocks applied. This control fails is if any of the following settings are set to false:

ignorePublicAcls

blockPublicPolicy

blockPublicAcls

restrictPublicBuckets

Block Public Access at the S3 bucket level provides controls to ensure that objects never have public access. Public access is granted to buckets and objects through access control lists (ACLs), bucket policies, or both.

Vulnerability 2: Security groups should only allow unrestricted incoming traffic for authorized ports
-----------------------------------------------------------------------------------------------------
authorizedTcpPorts (Optional) â€“ Comma-separated list of ports to which to allow unrestricted access. For example: '80, 443'. For this rule, the default values for authorizedTcpPorts are 80 and 443.

This control checks whether the security groups that are in use allow unrestricted incoming traffic. Optionally the rule checks whether the port numbers are listed in the authorizedTcpPorts parameter.

If the security group rule port number allows unrestricted incoming traffic, but the port number is specified in authorizedTcpPorts, then the control passes. The default value for authorizedTcpPorts is 80, 443.

If the security group rule port number allows unrestricted incoming traffic, but the port number is not specified in authorizedTcpPorts input parameter, then the control fails.

If the parameter is not used, then the control fails for any security group that has an unrestricted inbound rule.

Security groups provide stateful filtering of ingress and egress network traffic to AWS. Security group rules should follow the principal of least privileged access. Unrestricted access (IP address with a /0 suffix) increases the opportunity for malicious activity such as hacking, denial-of-service attacks, and loss of data.

Unless a port is specifically allowed, the port should deny unrestricted access.

Vulnerability 3: EC2 instances should not have a public IPv4 address
--------------------------------------------------------------------
This control checks whether EC2 instances have a public IP address. The control fails if the publicIp field is present in the EC2 instance configuration item. This control applies to IPv4 addresses only.

A public IPv4 address is an IP address that is reachable from the internet. If you launch your instance with a public IP address, then your EC2 instance is reachable from the internet. A private IPv4 address is an IP address that is not reachable from the internet. You can use private IPv4 addresses for communication between EC2 instances in the same VPC or in your connected private network.

IPv6 addresses are globally unique, and therefore are reachable from the internet. However, by default all subnets have the IPv6 addressing attribute set to false. For more information about IPv6, see IP addressing in your VPC in the Amazon VPC User Guide.

If you have a legitimate use case to maintain EC2 instances with public IP addresses, then you can suppress the findings from this control. For more information about front-end architecture options, see the AWS Architecture Blog or the This Is My Architecture series.

Remediation
Use a non-default VPC so that your instance is not assigned a public IP address by default.

When you launch an EC2 instance into a default VPC, it is assigned a public IP address. When you launch an EC2 instance into a non-default VPC, the subnet configuration determines whether it receives a public IP address. The subnet has an attribute to determine if new EC2 instances in the subnet receive a public IP address from the public IPv4 address pool.

You cannot manually associate or disassociate an automatically-assigned public IP address from your EC2 instance. To control whether your EC2 instance receives a public IP address, do one of the following:

Modify the public IP addressing attribute of your subnet. For more information, see Modifying the public IPv4 addressing attribute for your subnet in the Amazon VPC User Guide.

Enable or disable the public IP addressing feature during launch. This overrides the subnet's public IP addressing attribute.

Bonus - provide recommendations on how to remediate the vulnerabilities.

Vulnerability 4: EC2 subnets should not automatically assign public IP addresses
---------------------------------------------------------------------------------
This control checks whether the assignment of public IPs in Amazon Virtual Private Cloud (Amazon VPC) subnets have MapPublicIpOnLaunch set to FALSE. The control passes if the flag is set to FALSE.

All subnets have an attribute that determines whether a network interface created in the subnet automatically receives a public IPv4 address. Instances that are launched into subnets that have this attribute enabled have a public IP address assigned to their primary network interface.

Remediation
You can configure a subnet from the Amazon VPC console.

To configure a subnet to not assign public IP addresses

Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.

In the navigation pane, choose Subnets.

Select your subnet and then choose Subnet Actions, Modify auto-assign IP settings.

Clear the Enable auto-assign public IPv4 address check box and then choose Save.

Vulnerability 5: S3 buckets should require requests to use Secure Socket Layer
-------------------------------------------------------------------------------
S3 buckets should have policies that require all requests (Action: S3:*) to only accept transmission of data over HTTPS in the S3 resource policy, indicated by the condition key aws:SecureTransport.

Remediation
To remediate this issue, update the permissions policy of the S3 bucket.

To configure an S3 bucket to deny nonsecure transport

Open the Amazon S3 console at https://console.aws.amazon.com/s3/.

Navigate to the noncompliant bucket, then choose the bucket name.

Choose Permissions, and then choose Bucket Policy.

Vulnerability 6: S3 buckets should have server-side encryption enabled
-----------------------------------------------------------------------

This control checks that your S3 bucket either has Amazon S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server-side encryption.

For an added layer of security for your sensitive data in S3 buckets, you should configure your buckets with server-side encryption to protect your data at rest. Amazon S3 encrypts each object with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it rotates regularly. Amazon S3 server-side encryption uses one of the strongest block ciphers available to encrypt your data, 256-bit Advanced Encryption Standard (AES-256).

To learn more, see Protecting data using server-side encryption with Amazon S3-managed encryption keys (SSE-S3) in the Amazon Simple Storage Service User Guide.

Remediation
To remediate this issue, update your S3 bucket to enable default encryption.

To enable default encryption on an S3 bucket

Open the Amazon S3 console at https://console.aws.amazon.com/s3/.

In the left navigation pane, choose Buckets.

Choose the S3 bucket from the list.

Choose Properties.

Choose Default encryption.

For the encryption, choose either AES-256 or AWS-KMS.

Vulnerability 7: Amazon EC2 should be configured to use VPC endpoints
-----------------------------------------------------------------------
This control checks whether a service endpoint for Amazon EC2 is created for each VPC. The control fails if a VPC does not have a VPC endpoint created for the Amazon EC2 service.

This control evaluates resources in single account. It cannot describe resources that are outside of the account. Because AWS Config and Security Hub do not conduct cross-account checks, you will see FAILED findings for VPCs that are shared across accounts. Security Hub recommends that you suppress these FAILED findings.

To improve the security posture of your VPC, you can configure Amazon EC2 to use an interface VPC endpoint. Interface endpoints are powered by AWS PrivateLink, a technology that enables you to access Amazon EC2 API operations privately. It restricts all network traffic between your VPC and Amazon EC2 to the Amazon network. Because endpoints are supported within the same Region only, you cannot create an endpoint between a VPC and a service in a different Region. This prevents unintended Amazon EC2 API calls to other Regions.

To learn more about creating VPC endpoints for Amazon EC2, see Amazon EC2 and interface VPC endpoints in the Amazon EC2 User Guide for Linux Instances.

Remediation
To remediate this issue, you can create an interface VPC endpoint to Amazon EC2.

To create an interface endpoint to Amazon EC2 from the Amazon VPC console

Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.

In the navigation pane, choose Endpoints.

Choose Create Endpoint.

For Service category, choose AWS services.

For Service Name, choose com.amazonaws.<region>.ec2.

For Type, choose Interface.

Complete the following information.

For VPC, select a VPC in which to create the endpoint.

For Subnets, select the subnets (Availability Zones) in which to create the endpoint network interfaces. Not all Availability Zones are supported for all AWS services.

To enable private DNS for the interface endpoint, select the check box for Enable DNS Name. This option is enabled by default.

To use the private DNS option, the following attributes of your VPC must be set to true:

enableDnsHostnames

enableDnsSupport

For more information, see Viewing and updating DNS support for your VPC in the Amazon VPC User Guide.

For Security group, select the security groups to associate with the endpoint network interfaces.

(Optional) Add or remove a tag. To add a tag, choose Add tag and do the following:

For Key, enter the tag name.

For Value, enter the tag value.

To remove a tag, choose the delete button (x) to the right of the tag Key and Value.

Choose Create endpoint.

To create an interface VPC endpoint policy

You can attach a policy to your VPC endpoint to control access to the Amazon EC2 API. The policy specifies the following:

The principal that can perform actions

The actions that can be performed

The resource on which the actions can be performed

Vulnerability 8: EBS default encryption should be enabled
----------------------------------------------------------
This control checks whether account-level encryption is enabled by default for Amazon Elastic Block Store(Amazon EBS). The control fails if the account level encryption is not enabled.

When encryption is enabled for your account, Amazon EBS volumes and snapshot copies are encrypted at rest. This adds an additional layer of protection for your data. For more information, see Encryption by default in the Amazon EC2 User Guide for Linux Instances.

Note that following instance types do not support encryption: R1, C1, and M1.

Remediation
You can use the Amazon EC2 console to enable default encryption for Amazon EBS volumes.

To configure the default encryption for Amazon EBS encryption for a Region

Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.

From the navigation pane, select EC2 Dashboard.

In the upper-right corner of the page, choose Account Attributes, EBS encryption.

Choose Manage.

Select Enable. You can keep the AWS managed key with the alias alias/aws/ebs created on your behalf as the default encryption key, or choose a symmetric customer managed key.

Choose Update EBS encryption.